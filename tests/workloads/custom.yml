# This file is an example YCSBR workload configuration file. You can create a
# workload from this configuration using
# `ycsbr::gen::PhasedWorkload::LoadFrom()`.

# Set the size of the records that will be used in the workload. All records
# will have an 8 byte key (64-bit unsigned integer), so this size must be at
# least 9.
record_size_bytes: 16

# Configures the records that should be loaded before the workload runs. The
# supported distributions are (i) uniform, (ii) hotspot, and (iii) linspace. For
# both uniform and hotspot, you must specify a range (inclusive) for the keys.
# For hotspot distributions, you must also specify an inclusive hot range that
# must lie inside the overall range. You also need to specify a hot proportion
# percentage (how many of the inserts should appear inside the hot range). For
# linspace, see the example below.
load:
  num_records: 10
  distribution:
    type: uniform
    range_min: 100
    range_max: 1000000

# If you want to use a custom dataset, specify the load distribution type as
# "custom". Then in your code, you need to call
# `PhasedWorkload::SetCustomLoadDataset()` before starting the workload.
#
# NOTE: Setting this "custom" distribution type is not required for using a
# custom dataset; you can still call `SetCustomLoadDataset()` to overwrite the
# load dataset that the workload generator would otherwise generate. However,
# the initial workload creation will be faster if you set the distribution type
# to "custom" in the workload file.
#
# load:
#   distribution:
#     type: custom

# Linspace distributions are keys generated with a fixed spacing. You specify
# the start key and step size. It is named after the analogous method in numpy.
#
# Example linspace distribution configuration that would generate the keys
# `[100, 1100, 2100]`:
#
# load:
#   num_records: 3
#   distribution:
#     type: linspace
#     start_key: 100
#     step_size: 1000

# Configures the workload phases. There can be at most 254 phases. When running
# with more than one thread, the number of requests will be divided equally
# among all the threads.
#
# If any operation type is not specified in a phase, its proportion percentage
# is assumed to be 0%.
run:
- num_requests: 20
  # For read, readmodifywrite, negativeread, update, and scan operations, the
  # allowed distributions are (i) uniform, (ii) zipfian, and (iii) latest. See
  # the example usages below for more information.
  #
  # A read-modify-write consists of a point read followed by a point update for
  # the same key. Even though a read-modify-write consists of 2 physical
  # requests, we count it as 1 "logical" request towards the total
  # `num_requests` specified above. This is the same behavior as the YCSB driver.
  read:
    proportion_pct: 45
    distribution:
      type: zipfian
      # We only support values of theta in the exclusive range (0, 1). A larger
      # value of theta means there is more skew.
      theta: 0.99
      # This is an optional value used to select different "hot" keys. If there
      # are multiple zipfian distributed operations, by default they will all
      # have the same hot keys. If you selece different salts for the
      # distributions, the generator will then choose different hot keys.
      salt: 12345
  readmodifywrite:
    proportion_pct: 5
    distribution:
      type: uniform
  # Negative reads are read requests that will be for keys that do not exist in
  # the database.
  negativeread:
    proportion_pct: 5
    distribution:
      type: uniform
  update:
    proportion_pct: 25
    distribution:
      # The "latest" distribution favors choosing the most recently inserted
      # records. Specify a theta value in the exclusive range (0, 1) to set the
      # skew (a larger theta means more skew).
      type: latest
      theta: 0.99
  scan:
    proportion_pct: 10
    # For scans, you need to specify the maximum scan length. The scan length
    # will be selected uniformly from the range [1, max_length].
    max_length: 1000
    distribution:
      type: uniform

  # For inserts, the supported distributions are the same as for the "load"
  # configuration above.
  insert:
    proportion_pct: 10
    distribution:
      type: hotspot
      range_min: 1000
      range_max: 2000
      hot_proportion_pct: 90
      hot_range_min: 1100
      hot_range_max: 1200

- num_requests: 20
  insert:
    proportion_pct: 100
    distribution:
      type: custom
      name: wiki_timestamps
      offset: 10
